
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> (load "lp.l")

;; Loading file lp.l ...
;; Loaded file lp.l
T
[2]> (take-from 'one '(one two three four) )

(TWO THREE FOUR)
[3]> (take-from 2 '(1 2 3 4) )

(1 3 4)
[4]> (take-from 'a '(a a a a a a a a a a a a a a a) )

NIL
[5]> (trace take-from)

;; Tracing function TAKE-FROM.
(TAKE-FROM)
[6]> (take-from 'bat '(mat cat bat rat bat hat) ) 

1. Trace: (TAKE-FROM 'BAT '(MAT CAT BAT RAT BAT HAT))
2. Trace: (TAKE-FROM 'BAT '(CAT BAT RAT BAT HAT))
3. Trace: (TAKE-FROM 'BAT '(BAT RAT BAT HAT))
4. Trace: (TAKE-FROM 'BAT '(RAT BAT HAT))
5. Trace: (TAKE-FROM 'BAT '(BAT HAT))
6. Trace: (TAKE-FROM 'BAT '(HAT))
7. Trace: (TAKE-FROM 'BAT 'NIL)
7. Trace: TAKE-FROM ==> NIL
6. Trace: TAKE-FROM ==> (HAT)
5. Trace: TAKE-FROM ==> (HAT)
4. Trace: TAKE-FROM ==> (RAT HAT)
3. Trace: TAKE-FROM ==> (RAT HAT)
2. Trace: TAKE-FROM ==> (CAT RAT HAT)
1. Trace: TAKE-FROM ==> (MAT CAT RAT HAT)
(MAT CAT RAT HAT)
[7]> (bye)

Bye.
